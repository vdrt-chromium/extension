{"version":3,"file":"static/js/youtubeContent.js","mappings":"mBAcO,IAAKA,EAAU,SAAVA,GAAU,OAAVA,EAAU,kBAAVA,EAAU,kBAAVA,EAAU,0BAAVA,EAAU,kCAAVA,EAAU,cAAVA,EAAU,gBAAVA,EAAU,gCAAVA,EAAU,kBAAVA,EAAU,kCAAVA,CAAU,MCZtB,MAAMC,EAAWA,KACbC,OAAOC,QAAQC,YAA+B,CAC1CC,OAAQL,EAAWM,MACnBC,MAAO,2EACT,EAGNN,IAEAC,OAAOC,QAAQK,UAAUC,aAAaC,IACX,gBAAnBA,EAAQL,QACRJ,GACJ,G","sources":["background/actions/types.ts","content/youtubeChrome.ts"],"sourcesContent":["import { TwitterResponseType } from \"../../content/types\";\nimport { MediaHeaders, SiteWithMediaType, VideoType } from \"../../types/MediaTypes\";\n\nexport type ChromeMessageType =\n    DefaultMessageType |\n    TwitterMessageType |\n    PageUpdatedMessageType |\n    TwitterResponseMessageType |\n    ErrorMessageType |\n    TikTokMessageType |\n    TikTokResponseMessageType |\n    YouTubeMessageType |\n    YouTubeResponseMessageType;\n\nexport enum ActionType {\n    Default = 'default',\n    Twitter = 'twitter',\n    PageUpdated = 'pageUpdated',\n    TwitterResponse = 'twitterResponse',\n    Error = 'error',\n    TikTok = 'tikTok',\n    TikTokResponse = 'tikTokResponse',\n    YouTube = 'youTube',\n    YouTubeResponse = 'youTubeResponse',\n}\n\nexport type DefaultMessageType = {\n    action: ActionType.Default;\n    body: SiteWithMediaType;\n}\n\nexport type TwitterMessageType = {\n    action: ActionType.Twitter;\n    body: {\n        tweetId: string;\n    };\n}\n\nexport type PageUpdatedMessageType = {\n    action: ActionType.PageUpdated;\n}\n\nexport type TwitterResponseMessageType = {\n    action: ActionType.TwitterResponse;\n    body: TwitterResponseType;\n}\n\nexport type ErrorMessageType = {\n    action: ActionType.Error;\n    error: string;\n}\n\nexport type TikTokMessageType = {\n    action: ActionType.TikTok;\n    url: string;\n}\n\nexport type TikTokResponseMessageType = {\n    action: ActionType.TikTokResponse;\n    data: {\n        url: string;\n        title: string;\n        headers?: MediaHeaders;\n    };\n}\n\nexport type YouTubeMessageType = {\n    action: ActionType.YouTube;\n    url: string;\n}\n\nexport type YouTubeResponseMessageType = {\n    action: ActionType.YouTubeResponse;\n    data: {\n        list: VideoType[],\n        header: string,\n        id: string\n    };\n}\n","import { ActionType, ChromeMessageType } from \"../background/actions/types\";\n\nconst setError = () => {\n    chrome.runtime.sendMessage<ChromeMessageType>({\n        action: ActionType.Error,\n        error: 'Sorry, due to YouTube Policy we do not support downloading from YouTube',\n    })\n}\n\nsetError();\n\nchrome.runtime.onMessage.addListener((message) => {\n    if (message.action === \"pageUpdated\") {\n        setError()\n    }\n});"],"names":["ActionType","setError","chrome","runtime","sendMessage","action","Error","error","onMessage","addListener","message"],"sourceRoot":""}